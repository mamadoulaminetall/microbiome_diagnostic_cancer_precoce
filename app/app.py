import streamlit as st
import pandas as pd
import joblib
import shap
import matplotlib.pyplot as plt

# Configuration de la page Streamlit
st.set_page_config(page_title="D√©tection pr√©coce du cancer via le microbiome", layout="wide")

# Titre et description de l'application
st.title("üß¨ D√©tection Pr√©coce du Cancer via le Microbiome")
st.markdown("Chargez vos donn√©es de s√©quen√ßage brut (FASTQ ou CSV) pour commencer l'analyse.")

# T√©l√©chargement du fichier CSV ou FASTQ
uploaded_file = st.file_uploader("üìÅ Upload des donn√©es de s√©quen√ßage", type=["csv", "fastq", "fq"])

@st.cache_resource
def load_model():
    try:
        # Charger le mod√®le RandomForest (√† remplacer par ton mod√®le choisi)
        return joblib.load("models/RandomForest_model.joblib")  # Assure-toi que le bon mod√®le est s√©lectionn√©
    except FileNotFoundError:
        st.error("‚ùå Le mod√®le 'RandomForest_model.joblib' n'a pas √©t√© trouv√© dans le dossier 'models'.")
        return None

# Charger le mod√®le
model = load_model()

if uploaded_file:
    if uploaded_file.name.endswith('.csv'):
        try:
            # Lire le fichier CSV
            df = pd.read_csv(uploaded_file)

            # Afficher un aper√ßu des donn√©es
            st.subheader("üìä Aper√ßu des donn√©es charg√©es")
            st.dataframe(df.head())

            # Retirer la colonne 'label' si elle est pr√©sente
            if 'label' in df.columns:
                df_features = df.drop(columns=['label'])
            else:
                df_features = df

            # Bouton pour lancer la pr√©diction
            if st.button("üîç Lancer la pr√©diction"):
                if model:
                    try:
                        # Pr√©diction avec le mod√®le
                        preds = model.predict(df_features)
                        st.subheader("üî¨ R√©sultats de la pr√©diction")
                        st.write(preds)

                        # Explication du mod√®le avec SHAP
                        try:
                            explainer = shap.Explainer(model)
                            shap_values = explainer(df_features)

                            st.subheader("üß† Interpr√©tation du mod√®le (SHAP)")
                            plt.figure()
                            shap.summary_plot(shap_values, df_features, show=False)
                            st.pyplot(plt)
                        except Exception as e:
                            st.warning(f"SHAP n'a pas pu s'ex√©cuter : {e}")

                    except Exception as e:
                        st.error(f"Erreur lors de la pr√©diction : {e}")
                else:
                    st.error("‚ùå Le mod√®le n'a pas pu √™tre charg√©. Veuillez v√©rifier les fichiers du mod√®le.")

        except pd.errors.EmptyDataError:
            st.error("‚ùå Le fichier est vide ou mal format√©. Veuillez v√©rifier le CSV.")
        except Exception as e:
            st.error(f"‚ùå Erreur lors de la lecture du fichier : {e}")
    else:
        st.success(f"Fichier {uploaded_file.name} charg√©. Pr√™t pour le pr√©traitement FASTQ.")
        st.markdown("‚û°Ô∏è Traitement FASTQ √† impl√©menter...")
